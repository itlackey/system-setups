---
- name: Base setup for ubuntu system
  hosts: localhost
  become: yes
  gather_facts: true
  vars_files:
    - ./vars.yml

  tasks:
    - name: Update repositories cache
      apt:
        update_cache: yes
        upgrade: "{{ upgrade }}"

    - name: "Add nodejs apt key"
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: "Add nodejs ppa for apt repo"
      apt_repository:
        repo: deb https://deb.nodesource.com/node_18.x jammy main

    - name: "Add chrome apt key"
      apt_key:
        url: https://dl.google.com/linux/linux_signing_key.pub
        state: present

    - name: Add Google Chrome repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
        state: present

    - name: Add Vivaldi key
      apt_key:
        url: https://repo.vivaldi.com/archive/linux_signing_key.pub
        state: present

    - name: Add Vivaldi repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] http://repo.vivaldi.com/archive/deb/ stable main"
        state: present

    - name: Add Docker key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        state: present

    - name: Update repositories cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - git
          - bash-completion
          - curl
          - python3-apt
          - apt-transport-https
          - ca-certificates
          - gnupg
          - software-properties-common
          - lsb-release
          - yakuake
          - wget
          - vivaldi-stable
          - google-chrome-stable
          - nodejs
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Check if VSCode is installed
      ansible.builtin.command: which code
      register: code_check
      changed_when: not code_check.stdout
      ignore_errors: yes

    - name: Install VSCode
      ansible.builtin.apt:
        deb: https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64
        state: present
      when: code_check.changed

    - name: Check if Azure CLI is installed
      ansible.builtin.command: which az
      register: azcli_check
      changed_when: not code_check.stdout
      ignore_errors: yes

    - name: Download Azure CLI installation script
      ansible.builtin.shell: curl -sL https://aka.ms/InstallAzureCLIDeb -o /tmp/install_azure_cli.sh
      when: azcli_check.changed

    - name: Install Azure CLI
      ansible.builtin.shell: sudo bash /tmp/install_azure_cli.sh
      when: azcli_check.changed

    - name: Install .NET SDK
      apt:
        name: dotnet-sdk-6.0
        state: present
        update_cache: yes

    - name: Check if Zoom is installed
      ansible.builtin.command: which zoom
      register: zoom_check
      changed_when: not zoom_check.stdout
      ignore_errors: yes

    - name: Install Zoom
      apt:
        deb: https://zoom.us/client/latest/zoom_amd64.deb
        state: present
      when: zoom_check.changed

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes

    - name: Install snaps
      community.general.snap:
        name:
          - postman
          - storage-explorer

    - name: Check storage explorer connection status
      ansible.builtin.command: "snap connections 'storage-explorer'"
      register: connection_status
      changed_when: not connection_status.stdout

    - name: connect storage explorer to keyring
      command:
        cmd: snap connect storage-explorer:password-manager-service :password-manager-service
      become: yes
      when: not 'storage-explorer:password-manager-service' in connection_status.stdout

    - name: Check if user email is already set
      git_config:
        name: user.email
        scope: global
      register: email_config

    - name: Check if user name is already set
      git_config:
        name: user.name
        scope: global
      register: name_config

    - name: Set user email
      git_config:
        name: user.email
        scope: global
        value: "{{ email }}"
      when: not email_config.config_value

    - name: Set user name
      community.general.git_config:
        name: "user.name"
        scope: global
        value: "{{ username }}"
      when: not name_config.config_value
